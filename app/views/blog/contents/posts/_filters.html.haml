/ views/blog/contents/posts/_filters.html.haml

.filters

  %ul.list-inline
  
    %li.list-inline-item

      - if params.slice(*Blog::Contents::PostsController.filtering_params).blank?
        %span.text-primary= th 'forms.all'
      - else
        = link_to blog_contents_posts_path do
          = th 'forms.all'
          %span.tag.tag-default= Blog::Contents::Post.count
          
    %li.list-inline-item
    
      - if params[:mine] && params[:mine].to_i.eql?(current_user.id)
        %span.text-primary= th 'forms.mine'
        = link_to filtered_entries_path(mine: nil) do
          = i 'times-circle-o'
      - else
        = link_to filtered_entries_path(mine: current_user.id, owner: nil, writer: nil, editor: nil, optimizer: nil) do
          = th 'forms.mine'
          %span.tag.tag-default= @posts_not_user_filtered.mine(current_user.id).count
    
    %li.list-inline-item
      
      - unless params[:recent].blank?
        %span.text-primary= th 'forms.recent'
        = link_to filtered_entries_path(recent: nil) do
          = i 'times-circle-o'
      - else
        = link_to filtered_entries_path(recent: 10) do
          = th 'forms.recent'
          %span.tag.tag-default= @posts_unpaginated.recent(10).count
  
    - filters = [{ count: @posts_not_status_filtered.published.published_before(Time.now).count, 
      filter: params[:published_before], 
      cond: params[:published_before].blank?,
      value: :published,
      path_cond: {status: :published, published_after: nil, published_before: Time.now}},
      { count: @posts_not_status_filtered.published.published_after(Time.now).count, 
      filter: params[:published_after], 
      cond: params[:published_after].blank?,
      value: :scheduled,
      path_cond: {status: :published, published_after: Time.now,  published_before: nil}},
      { count: @posts_not_status_filtered.submitted.count, 
      filter: params[:status].eql?('submitted'), 
      cond: !params[:status].eql?('submitted'),
      value: :submitted,
      path_cond: {status: :submitted, published_after: nil,  published_before: nil}},
      { count: @posts_not_status_filtered.draft.count, 
      filter: params[:status].eql?('draft'), 
      cond: !params[:status].eql?('draft'),
      value: :draft,
      path_cond: {status: :draft, published_after: nil,  published_before: nil}}]
  
    - filters.each do |filter|
      - if filter[:count]>0 || filter[:filter]
        %li.list-inline-item
          - unless filter[:cond]
            %span.text-primary= hen 'blog/contents/post', :status, filter[:value]
            = link_to filtered_entries_path(status: nil, published_after: nil, published_before: nil) do
              = i 'times-circle-o'
          - else
            = link_to filtered_entries_path(filter[:path_cond]) do
              = hen 'blog/contents/post', :status, filter[:value]
            %span.tag.tag-default= filter[:count]
            

    %li.list-inline-item.hidden-sm-up.toggle-card= link_to i('chevron-down'), '#post_filters', data: {toggle: 'collapse'}, class: 'text text-primary', id: 'show_filters'

  #post_filters.collapse.navbar-toggleable-xs.toggle-chevron

    = bootstrap_form_tag url: blog_contents_posts_path, method: :get, layout: :inline do |f|

      = f.hidden_field :recent, value: params[:recent]       unless params[:recent].blank?
      = f.hidden_field :status, value: params[:status]       unless params[:status].blank?
      = f.hidden_field :published_after, value: params[:published_after]       unless params[:published_after].blank?
      = f.hidden_field :published_before, value: params[:published_before]       unless params[:published_before].blank?
    
      / .container-fluid
      /   .row
      /     .col-xs-12
    
      = f.select :business_website_id, Business::Website.all.map{|_| [_.decorate.name, _.id ]}, 
        {selected: @website.try(:id), 
        include_blank: th('forms.all_websites'),
        hide_label: true},
        class: 'form-control-sm',
        onchange: "this.form.submit()"
        
      = f.text_field :title_contains, value: params[:title_contains], hide_label: true, class: 'form-control-sm', placeholder: han('blog/contents/post', :title)
  
      - if @website
        = f.select :category_id, @website.categories.map{|_| [_.decorate.name, _.id ]}, 
          {selected: params[:category_id], 
          include_blank: th('forms.all_categories'),
          hide_label: true}, class: 'form-control-sm',
          onchange: "this.form.submit()"
          
      - else
        = f.grouped_collection_select :category_id, Business::Website.has_categories, :categories, :host, :id, :name,
          {selected: params[:category_id],
          include_blank: th('forms.all_categories'),
          hide_label: true}, 
          class: 'form-control-sm',
          onchange: "this.form.submit()"
    
      - if @website
        = f.select :tag_id, @website.tags.map{|_| [_.decorate.name, _.id ]}, 
          {selected: params[:tag_id], 
          include_blank: th('forms.all_tags'),
          hide_label: true}, class: 'form-control-sm',
          onchange: "this.form.submit()"
      - else
        = f.grouped_collection_select :tag_id, Business::Website.has_tags, :tags, :host, :id, :name,
          {selected: params[:tag_id],
          include_blank: th('forms.all_tags'),
          hide_label: true},
          class: 'form-control-sm',
          onchange: "this.form.submit()"
  
      

      - if params[:mine].blank?
  
        / .row
        /   .col-xs-12

        - %w(owner editor writer optimizer).each do |user_type|
  
          = f.select user_type.to_sym, People::User.all.map{|_| [_.decorate.name, _.id ]}, 
            { selected: params[user_type], 
            include_blank: th("forms.all_#{user_type.pluralize}"),
            hide_label: true },
            class: 'form-control-sm',
            onchange: "this.form.submit()"
    
    
      / = f.submit th('forms.filter'), class: 'form-control-sm'